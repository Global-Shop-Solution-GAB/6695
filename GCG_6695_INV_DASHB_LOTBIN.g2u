Program.Sub.ScreenSU.Start
Gui.frmXStatus..Create(BaseForm)
Gui.frmXStatus..Caption("Inventory Extended Status 6695")
Gui.frmXStatus..Size(15045,10095)
Gui.frmXStatus..MinX(15045)
Gui.frmXStatus..MinY(10095)
Gui.frmXStatus..Position(0,0)
Gui.frmXStatus..BackColor(-2147483633)
Gui.frmXStatus..MousePointer(0)
Gui.frmXStatus..Event(UnLoad,Unload)
Gui.frmXStatus..AlwaysOnTop(False)
Gui.frmXStatus..FontName("Tahoma")
Gui.frmXStatus..FontSize(8.25)
Gui.frmXStatus..ControlBox(True)
Gui.frmXStatus..MaxButton(True)
Gui.frmXStatus..MinButton(True)
Gui.frmXStatus..Moveable(True)
Gui.frmXStatus..Sizeable(True)
Gui.frmXStatus..ShowInTaskBar(True)
Gui.frmXStatus..TitleBar(True)
Gui.frmXStatus.picGSSLogo.Create(PictureBox)
Gui.frmXStatus.picGSSLogo.Size(4125,960)
Gui.frmXStatus.picGSSLogo.Position(10245,30)
Gui.frmXStatus.picGSSLogo.Enabled(True)
Gui.frmXStatus.picGSSLogo.Visible(True)
Gui.frmXStatus.picGSSLogo.Zorder(0)
Gui.frmXStatus.frameCutoff.Create(Frame)
Gui.frmXStatus.frameCutoff.Size(1590,870)
Gui.frmXStatus.frameCutoff.Position(30,60)
Gui.frmXStatus.frameCutoff.Caption("Cutoff Date")
Gui.frmXStatus.frameCutoff.Enabled(True)
Gui.frmXStatus.frameCutoff.Visible(True)
Gui.frmXStatus.frameCutoff.Zorder(0)
Gui.frmXStatus.frameCutoff.FontName("Tahoma")
Gui.frmXStatus.frameCutoff.FontSize(8.25)
Gui.frmXStatus.dtpCutoff.Create(DatePicker)
Gui.frmXStatus.dtpCutoff.Size(1485,285)
Gui.frmXStatus.dtpCutoff.Position(30,240)
Gui.frmXStatus.dtpCutoff.Parent("frameCutoff")
Gui.frmXStatus.dtpCutoff.Enabled(False)
Gui.frmXStatus.dtpCutoff.TabStop(True)
Gui.frmXStatus.dtpCutoff.TabIndex(1)
Gui.frmXStatus.dtpCutoff.Visible(True)
Gui.frmXStatus.dtpCutoff.Zorder(0)
Gui.frmXStatus.dtpCutoff.CheckBox(False)
Gui.frmXStatus.dtpCutoff.FontName("Tahoma")
Gui.frmXStatus.dtpCutoff.FontSize(8.25)
Gui.frmXStatus.chkCutoff.Create(CheckBox)
Gui.frmXStatus.chkCutoff.Size(330,300)
Gui.frmXStatus.chkCutoff.Position(690,555)
Gui.frmXStatus.chkCutoff.Parent("frameCutoff")
Gui.frmXStatus.chkCutoff.Event(Click,chkCutoff_Click)
Gui.frmXStatus.chkCutoff.TabStop(True)
Gui.frmXStatus.chkCutoff.TabIndex(2)
Gui.frmXStatus.chkCutoff.Enabled(True)
Gui.frmXStatus.chkCutoff.Visible(True)
Gui.frmXStatus.chkCutoff.Zorder(0)
Gui.frmXStatus.chkCutoff.Caption("")
Gui.frmXStatus.chkCutoff.FontName("Tahoma")
Gui.frmXStatus.chkCutoff.FontSize(8.25)
Gui.frmXStatus.lblStatus.Create(Label,"Loading Data....",False,1125,210,0,4455,240,True,0,"Arial",8,-2147483633,0,0)
Gui.frmXStatus.lblStatus.BorderStyle(0)
Gui.frmXStatus.pbStatus.Create(ProgressBar)
Gui.frmXStatus.pbStatus.Size(3000,255)
Gui.frmXStatus.pbStatus.Position(4455,450)
Gui.frmXStatus.pbStatus.Visible(False)
Gui.frmXStatus.GsGCXStatus.Create(GsGridControl)
Gui.frmXStatus.GsGCXStatus.Size(14865,8700)
Gui.frmXStatus.GsGCXStatus.Position(30,1020)
Gui.frmXStatus.GsGCXStatus.TabStop(True)
Gui.frmXStatus.GsGCXStatus.TabIndex(4)
Gui.frmXStatus.GsGCXStatus.Enabled(True)
Gui.frmXStatus.GsGCXStatus.Visible(True)
Gui.frmXStatus.GsGCXStatus.Zorder(0)
Gui.frmXStatus.cmdRefresh.Create(Button)
Gui.frmXStatus.cmdRefresh.Size(975,345)
Gui.frmXStatus.cmdRefresh.Position(3360,375)
Gui.frmXStatus.cmdRefresh.Caption("REFRESH")
Gui.frmXStatus.cmdRefresh.Event(Click,LoadDtXStatus)
Gui.frmXStatus.cmdRefresh.TabStop(True)
Gui.frmXStatus.cmdRefresh.TabIndex(3)
Gui.frmXStatus.cmdRefresh.Enabled(True)
Gui.frmXStatus.cmdRefresh.Visible(True)
Gui.frmXStatus.cmdRefresh.Zorder(0)
Gui.frmXStatus.cmdRefresh.FontName("Tahoma")
Gui.frmXStatus.cmdRefresh.FontSize(8.25)
Gui.frmXStatus.cmdSelectPL.Create(Button)
Gui.frmXStatus.cmdSelectPL.Enabled(False)
Gui.frmXStatus.cmdSelectPL.Visible(True)
Gui.frmXStatus.cmdSelectPL.Zorder(0)
Gui.frmXStatus.cmdSelectPL.Size(1125,345)
Gui.frmXStatus.cmdSelectPL.Position(1770,150)
Gui.frmXStatus.cmdSelectPL.Caption("Select PL")
Gui.frmXStatus.cmdSelectPL.FontName("Tahoma")
Gui.frmXStatus.cmdSelectPL.FontSize(8.25)
Gui.frmXStatus.cmdSelectPL.Event(Click,cmdSelectPL_Click)
Gui.frmXStatus.chkPL.Create(CheckBox)
Gui.frmXStatus.chkPL.Enabled(True)
Gui.frmXStatus.chkPL.Visible(True)
Gui.frmXStatus.chkPL.Zorder(0)
Gui.frmXStatus.chkPL.Size(1245,300)
Gui.frmXStatus.chkPL.Position(1785,600)
Gui.frmXStatus.chkPL.Caption("Filter by PL")
Gui.frmXStatus.chkPL.FontName("Tahoma")
Gui.frmXStatus.chkPL.FontSize(8.25)
Gui.frmXStatus.chkPL.Event(Change,chkPL_Change)
Gui.frmXStatus.txtListPL.Create(TextboxM)
Gui.frmXStatus.txtListPL.Enabled(False)
Gui.frmXStatus.txtListPL.Visible(False)
Gui.frmXStatus.txtListPL.Zorder(0)
Gui.frmXStatus.txtListPL.Size(1770,855)
Gui.frmXStatus.txtListPL.Position(14445,75)
Gui.frmXStatus.txtListPL.FontName("Tahoma")
Gui.frmXStatus.txtListPL.FontSize(8.25)
Gui.FormPL..Create(BaseForm)
Gui.FormPL..Caption("Select Product Lines")
Gui.FormPL..Size(5310,5730)
Gui.FormPL..MinX(0)
Gui.FormPL..MinY(0)
Gui.FormPL..Position(0,0)
Gui.FormPL..AlwaysOnTop(False)
Gui.FormPL..FontName("Tahoma")
Gui.FormPL..FontSize(8.25)
Gui.FormPL..ControlBox(True)
Gui.FormPL..MaxButton(True)
Gui.FormPL..MinButton(True)
Gui.FormPL..MousePointer(0)
Gui.FormPL..Moveable(True)
Gui.FormPL..Sizeable(True)
Gui.FormPL..ShowInTaskBar(True)
Gui.FormPL..TitleBar(True)
Gui.FormPL..Event(UnLoad,FormPL_UnLoad)
Gui.FormPL.gsgcAllPL.Create(GsGridControl)
Gui.FormPL.gsgcAllPL.Enabled(True)
Gui.FormPL.gsgcAllPL.Visible(True)
Gui.FormPL.gsgcAllPL.Zorder(0)
Gui.FormPL.gsgcAllPL.Size(5115,4575)
Gui.FormPL.gsgcAllPL.Position(90,60)
Gui.FormPL.cmdPL_OK.Create(Button)
Gui.FormPL.cmdPL_OK.Enabled(True)
Gui.FormPL.cmdPL_OK.Visible(True)
Gui.FormPL.cmdPL_OK.Zorder(0)
Gui.FormPL.cmdPL_OK.Size(1125,345)
Gui.FormPL.cmdPL_OK.Position(2055,4785)
Gui.FormPL.cmdPL_OK.Caption("OK")
Gui.FormPL.cmdPL_OK.FontName("Tahoma")
Gui.FormPL.cmdPL_OK.FontSize(8.25)
Gui.FormPL.cmdPL_OK.Event(Click,cmdPL_OK_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
	V.Global.bLoadData.Declare
	v.Global.sCutoffDate.Declare(String)
	
	v.Global.sFilterByProductLine.Declare(String)
	
Program.Sub.Preflight.End

Program.Sub.Main.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sGSSLogo.Declare
	V.Local.sIcon.Declare
	V.Local.sDir.Declare
	V.Local.bDir.Declare

	F.Intrinsic.String.Build("{0}\GAB\GAS\gss2.ico",V.Caller.PluginsDir,v.Local.sIcon)
	F.Intrinsic.String.Build("{0}\GAB\GAS\GAB_GSS_Logo_Green_Dash.png",V.Caller.PluginsDir,V.Local.sGssLogo)
	Gui.frmXStatus.picGSSLogo.Picture(V.Local.sGSSLogo)
	Gui.frmXStatus..Icon(V.Local.sIcon)
	'Gui.frmTotalsPL..Icon(V.Local.sIcon)
	
	F.Intrinsic.Control.CallSub(SetAnchors)
	F.Intrinsic.Control.CallSub(SetContextMenus)
	
	Gui.frmXStatus..Show
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.Unload.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	F.Intrinsic.Control.If(V.Global.bLoadData)
		F.Intrinsic.Control.CallSub(Serialize)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.Unload.End

Program.Sub.SetAnchors.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	'0 - None
	'1 - Top
	'2 - Bottom
	'4 - Left
	'8 - Right
	
	Gui.frmXStatus.picGssLogo.Anchor(1)
	Gui.frmXStatus.GsGCXStatus.Anchor(15)

	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.SetAnchors.End

Program.Sub.SetContextMenus.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	Gui.frmXStatus..ContextMenuCreate("ctxXStatus")
	Gui.frmXStatus.GsGCXStatus.ContextMenuAttach("ctxXStatus")
	Gui.frmXStatus..ContextMenuAddItem("ctxXStatus","Refresh",0,"Refresh")
	Gui.frmXStatus..ContextMenuAddItem("ctxXStatus","Export",0,"Export")
	Gui.frmXStatus..ContextMenuAddItem("ctxXStatus","ResetColumns",0,"Reset Columns")
	Gui.frmXStatus..ContextMenuSetItemEventHandler("ctxXStatus","Refresh","LoadDtXStatus")
	Gui.frmXStatus..ContextMenuSetItemEventHandler("ctxXStatus","Export","MenuClickExport")
	Gui.frmXStatus..ContextMenuSetItemEventHandler("ctxXStatus","ResetColumns","MenuClickResetColumns")
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.SetContextMenus.End

Program.Sub.MenuClickExport.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sFileExport.Declare
	V.Local.bExcel.Declare
	V.Local.bFileLocked.Declare
	V.Local.sMsg.Declare
	V.Local.sForm.Declare
	V.Local.sControl.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.MenuName)
		F.Intrinsic.Control.Case("CTXXSTATUS")
			V.Local.sForm.Set("frmXStatus")
			V.Local.sControl.Set("GsGCXStatus")
		F.Intrinsic.Control.Case("CTXPLS")
			V.Local.sForm.Set("frmTotalsPL")
			V.Local.sControl.Set("GsGCPLs")
	F.Intrinsic.Control.EndSelect

	F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
	F.Intrinsic.Control.If(V.Local.bExcel)
		F.Intrinsic.String.Build("{0}\GAB_Inv_XStatus_{1}_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
		F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
		F.Intrinsic.Control.If(V.Local.bFileLocked)
			F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
			F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
		F.Intrinsic.Control.Else
			Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0}\GAB_Inv_XStatus_{1}_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
		F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
		F.Intrinsic.Control.If(V.Local.bFileLocked)
			F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
			F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
		F.Intrinsic.Control.Else
			Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"csv")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.MenuClickExport.End

Program.Sub.MenuClickResetColumns.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.bSerialize.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.MenuName)
		F.Intrinsic.Control.Case("CTXXSTATUS")
			V.Global.bLoadData.Set(False)
			F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVXSTATUS",4631,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,"")
			F.Intrinsic.Control.CallSub(LoadDtXStatus)
	F.Intrinsic.Control.EndSelect
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.MenuClickResetColumns.End

Program.Sub.chkCutoff_Click.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	F.Intrinsic.Control.If(V.Screen.frmXStatus!chkCutoff.Value,=,1)
		Gui.frmXStatus.dtpCutoff.Enabled(True)
	F.Intrinsic.Control.Else
		Gui.frmXStatus.dtpCutoff.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.chkCutoff_Click.End

Program.Sub.LoadDtXStatus.Start
	F.Intrinsic.Control.Try
		
		V.Local.dCutoff.Declare()
		V.Local.dTemp.Declare()
		
		V.Local.iDifference.Declare()
		V.Local.iTemp.Declare()
		
		V.Local.sAllPairs.Declare()
		V.Local.sPartLoc.Declare()
		V.Local.sRet.Declare()
		V.Local.sSQL.Declare()
		
		v.Local.vProceed.Declare(String)
		
		'GCG_6695
		'If use not select a PL => display message
		'-----------------------------------------------------
		
		f.Intrinsic.Control.If(v.Global.sFilterByProductLine,=,"")
			f.Intrinsic.UI.Msgbox("Do You Want to Load All Product Lines?", "Select Product Lines", 4, v.Local.vProceed)
			f.Intrinsic.Control.If(v.Local.vProceed,!=,6)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
		'-----------------------------------------------------
		
		
		
		GUI.frmXStatus.cmdRefresh.Enabled(False)
		GUI.frmXStatus.GsGCXStatus.Enabled(False)
		
		Gui.frmXStatus.lblStatus.Visible(True)
		Gui.frmXStatus.pbStatus.Min(0)
		Gui.frmXStatus.pbStatus.Max(100)
		GUI.frmXStatus.pbStatus.Value(0)
		Gui.frmXStatus.pbStatus.Visible(True)
		
		F.ODBC.Connection!con.OpenCompanyConnection(999)
		
		F.Intrinsic.Control.If(V.Global.bLoadData)
			F.Intrinsic.Control.CallSub(Serialize)
		F.Intrinsic.Control.EndIf
		V.Global.bLoadData.Set(True)
		
		F.Intrinsic.Control.If(V.DataTable.dtXStatus.Exists)
			F.Data.DataTable.Close("dtXStatus")
		F.Intrinsic.Control.EndIf
		
		' Initialize main DT with InventoryMaster data.
		GUI.frmXStatus.lblStatus.Caption("Loading master status...")
		
		f.Intrinsic.String.Build("SELECT CONCAT(A.part, A.location) AS PartLoc, A.part AS Part, A.location AS Location, RTRIM(A.description) AS Description, RTRIM(RTRIM(B.description_2)+' '+RTRIM(B.description_3)) AS AltDesc, RTRIM(D.text) AS ExtraDesc, A.product_line AS Product_Line, CASE B.code_source WHEN 'P' THEN 'PS' WHEN 'J' THEN 'PJ' WHEN '' THEN 'PJ' WHEN 'M' THEN 'MS' WHEN 'F' THEN 'MJ' ELSE B.code_source END AS Code_Source, A.um_inventory AS UM_Inventory, A.time_material_lead AS Time_Material_Lead, A.code_sort AS Code_Sort, RTRIM(A.bin) AS Bin, A.code_abc AS Code_ABC, B.lbs AS LBS, CAST(NULL AS DATE) AS Date_History, A.qty_onhand AS Qty_Onhand, A.qty_reorder AS Qty_Reorder, A.qty_onorder_po + A.qty_onorder_wo AS OnOrder, A.qty_required AS Qty_Required, A.qty_usage_mo_01 + A.qty_usage_mo_02 + A.qty_usage_mo_03 + A.qty_usage_mo_04 + A.qty_usage_mo_05 + A.qty_usage_mo_06 + A.qty_usage_mo_07 + A.qty_usage_mo_08 + A.qty_usage_mo_09 + A.qty_usage_mo_10 + A.qty_usage_mo_11 + A.qty_usage_mo_12 AS Usage_Last_12_Mos, A.amt_price AS Amt_Price, C.cost AS Cost, C.matl AS Matl, C.labor AS Labor, C.ovhd AS Ovhd, C.outs AS Outs, C.freight AS Freight, C.oth AS Oth, CAST(CASE WHEN flag_lot = '' OR flag_lot = 'N' THEN 0 ELSE 1 END AS BIT) As Flag_Lot, CAST(CASE WHEN flag_drop = '' OR flag_drop = 'N' THEN 0 ELSE 1 END AS BIT) As Flag_Drop, CAST(CASE WHEN flag_serialize = '' Or flag_serialize = 'N' THEN 0 ELSE 1 END AS BIT) As Flag_Serialize, CAST(CASE WHEN obsolete_flag = '' Or obsolete_flag = 'N' THEN 0 ELSE 1 END AS BIT) As Obsolete_Flag, CAST(CASE WHEN flag_inactive = '' Or flag_inactive = 'N' THEN 0 ELSE 1 END AS BIT) As Flag_Inactive, RTRIM(B.name_vendor) AS Name_Vendor, RTRIM(B.text_info1) AS Text_Info1, RTRIM(B.text_info2) AS Text_Info2 FROM v_inventory_mstr A LEFT JOIN v_inventory_mst2 B ON A.part = B.part And A.location = B.location LEFT JOIN v_inventory_cost C On A.part = C.part And A.location = C.locn LEFT JOIN v_inv_extra_text D On A.part = D.part where 1=1 {0} ORDER BY PartLoc;", v.Global.sFilterByProductLine, v.Local.sSQL)
		
		F.Data.DataTable.CreateFromSQL("dtXStatus", "con", v.Local.sSQL, True)
		GUI.frmXStatus.pbStatus.Value(15)
		
		' If the user has selected a cutoff date, then maybe we need to load from InventoryHistory. Otherwise, the InventoryMaster data is already enough.
		F.Intrinsic.Control.If(V.Screen.frmXStatus!chkCutoff.Value, =, 1)
		
			V.Local.dCutoff.Set(V.Screen.frmXStatus!dtpCutoff.Value)
			
			'6695
			'Apr 2022
			'passing to global for child grid
			f.Intrinsic.String.Format(v.Local.dCutoff, "YYYY-MM-DD", v.Global.sCutoffDate)

			' To see if we should load InventoryHistory data, we check each PartLoc's MostRecentTransaction (most recent InventoryHistory record). For example...
			'	If a PartLoc has had a MostRecentTransaction after the selected cutoff date, then there has been a transaction that has changed InventoryMaster since that CutoffDate.
			'	So, the currently loaded InventoryMaster data would be reflecting a transaction that occurred after that CutoffDate.
			'	So, we need to go further back in the InventoryHistory to find a transaction that would reflect the inventory status on that CutoffDate.
			'	Specifically, we would need the MostRecentTransaction just before or on that CutoffDate for that PartLoc. And we would need the New values of that transaction.
			
			' So, let's start with a dictionary of each PartLoc's MostRecentTransactionAfterCutoff.
			GUI.frmXStatus.lblStatus.Caption("Checking most recent transactions...")
			F.Intrinsic.String.Build("SELECT RTRIM(CONCAT(part, location)) AS PartLoc, 'filler' FROM v_inventory_hist WHERE date_history > '{0}' AND NOT (code_transaction = 'P18' And old_inv_cost = new_inv_cost) {1} ORDER BY PartLoc, date_history DESC, inv_hist_time DESC", V.Local.dCutoff.PervasiveDate, v.Global.sFilterByProductLine, V.Local.sSQL)
			F.Data.Dictionary.CreateFromSQL("dictMostRecentTransactionsAfterCutoff", "con", V.Local.sSQL)
			F.Data.Dictionary.SetDefaultReturn("dictMostRecentTransactionsAfterCutoff", "KeyNotFound")
			GUI.frmXStatus.pbStatus.Value(25)
			
			' If there was nothing loaded into that dictionary at all, then there has not been any transactions since the cutoff and we do not need to continue with loading InventoryHistory.
			'	If there were no transactions since the cutoff, then the current InventoryMaster values are indeed the inventory status at the CutoffDate.
			F.Data.Dictionary.ReturnAllPairs("dictMostRecentTransactionsAfterCutoff", V.Local.sAllPairs)
			F.Intrinsic.Control.If(V.Local.sAllPairs, <>, "***NORETURN***")
				
				' Else, there were indeed transactions, so start loading InventoryHistory data.
				
				' Load all the transactions before or on the CutoffDate.
				' Sort them by Date DESC, Time DESC so that Dictionary.CreateFromDataTable takes each PartLoc's most recent one.
				GUI.frmXStatus.lblStatus.Caption("Loading history data...")
				
				'F.Intrinsic.String.Build("SELECT RTRIM(CONCAT(part, location)) As PartLoc, date_history, new_onhand, new_inv_cost, new_matl, new_labr, new_ovhd, new_outs, new_frgt, new_oth FROM v_inventory_hist WHERE date_history <= '{0}' ORDER BY PartLoc, date_action DESC, inv_hist_time DESC;", V.Local.dCutoff.PervasiveDate, V.Local.sSQL)
				F.Intrinsic.String.Build("SELECT RTRIM(CONCAT(part, location)) As PartLoc, date_history, new_onhand, new_inv_cost, new_matl, new_labr, new_ovhd, new_outs, new_frgt, new_oth FROM v_inventory_hist WHERE date_history <= '{0}' {1} ORDER BY PartLoc, date_history DESC, inv_hist_time DESC;", V.Local.dCutoff.PervasiveDate, v.Global.sFilterByProductLine, V.Local.sSQL)
				F.Data.DataTable.CreateFromSQL("dtTransactionsBeforeCutoff" ,"con", V.Local.sSQL, True)
				GUI.frmXStatus.pbStatus.Value(30)

				' Load each PartLoc's MostRecentTransactionBeforeCutoff's HistoryDate.
				GUI.frmXStatus.lblStatus.Caption("Loading history dates...")
				F.Data.Dictionary.CreateFromDataTable("dictDateHistory", "dtTransactionsBeforeCutoff", "PartLoc", "date_history")
				F.Data.Dictionary.SetDefaultReturn("dictDateHistory", "")
				GUI.frmXStatus.pbStatus.Value(35)
				
				' Load each PartLoc's MostRecentTransactionBeforeCutoff's NewOnHand.
				
				
				GUI.frmXStatus.lblStatus.Caption("Loading history onhand quantities...")
				F.Data.Dictionary.CreateFromDataTable("dictNewOnhand", "dtTransactionsBeforeCutoff", "PartLoc", "new_onhand")
				F.Data.Dictionary.SetDefaultReturn("dictNewOnhand", 0.0)
				GUI.frmXStatus.pbStatus.Value(40)
				
				' Load each PartLoc's MostRecentTransactionBeforeCutoff's NewCost.
				GUI.frmXStatus.lblStatus.Caption("Loading history costs...")
				F.Data.Dictionary.CreateFromDataTable("dictNewInvCost", "dtTransactionsBeforeCutoff", "PartLoc", "new_inv_cost")
				F.Data.Dictionary.SetDefaultReturn("dictNewInvCost", 0.0)
				GUI.frmXStatus.pbStatus.Value(45)
				
				' Load each PartLoc's MostRecentTransactionBeforeCutoff's NewMaterialCost.
				GUI.frmXStatus.lblStatus.Caption("Loading history material costs...")
				F.Data.Dictionary.CreateFromDataTable("dictNewMatl", "dtTransactionsBeforeCutoff", "PartLoc", "new_matl")
				F.Data.Dictionary.SetDefaultReturn("dictNewMatl",0.0)
				GUI.frmXStatus.pbStatus.Value(50)
				
				' Load each PartLoc's MostRecentTransactionBeforeCutoff's NewLaborCost.
				GUI.frmXStatus.lblStatus.Caption("Loading history labor costs...")
				F.Data.Dictionary.CreateFromDataTable("dictNewLabr", "dtTransactionsBeforeCutoff", "PartLoc", "new_labr")
				F.Data.Dictionary.SetDefaultReturn("dictNewLabr", 0.0)
				GUI.frmXStatus.pbStatus.Value(55)
				
				' Load each PartLoc's MostRecentTransactionBeforeCutoff's NewOverheadCost.
				GUI.frmXStatus.lblStatus.Caption("Loading history overhead costs...")
				F.Data.Dictionary.CreateFromDataTable("dictNewOvhd", "dtTransactionsBeforeCutoff", "PartLoc", "new_ovhd")
				F.Data.Dictionary.SetDefaultReturn("dictNewOvhd", 0.0)
				GUI.frmXStatus.pbStatus.Value(60)
				
				' Load each PartLoc's MostRecentTransactionBeforeCutoff's NewOutsideCost.
				GUI.frmXStatus.lblStatus.Caption("Loading history outside costs...")
				F.Data.Dictionary.CreateFromDataTable("dictNewOuts", "dtTransactionsBeforeCutoff", "PartLoc", "new_outs")
				F.Data.Dictionary.SetDefaultReturn("dictNewOuts", 0.0)
				GUI.frmXStatus.pbStatus.Value(65)
				
				' Load each PartLoc's MostRecentTransactionBeforeCutoff's NewFreightCost.
				GUI.frmXStatus.lblStatus.Caption("Loading history freight costs...")
				F.Data.Dictionary.CreateFromDataTable("dictNewFrgt", "dtTransactionsBeforeCutoff", "PartLoc", "new_frgt")
				F.Data.Dictionary.SetDefaultReturn("dictNewFrgt", 0.0)
				GUI.frmXStatus.pbStatus.Value(70)
				
				' Load each PartLoc's MostRecentTransactionBeforeCutoff's NewOtherCost.
				GUI.frmXStatus.lblStatus.Caption("Loading history other costs...")
				F.Data.Dictionary.CreateFromDataTable("dictNewOth", "dtTransactionsBeforeCutoff", "PartLoc", "new_oth")
				F.Data.Dictionary.SetDefaultReturn("dictNewOth", 0.0)
				GUI.frmXStatus.pbStatus.Value(75)
				
				' Loop through all the PartLocs in the main DT and replace InventoryMaster data with InventoryHistory data, if applicable.
				'	If the PartLoc is in dictMostRecentTransactionsAfterCutoff, then it will try to load InventoryHistory data for it.
				'		If the InventoryHistory dictionary has the data, then it replaces the InventoryMaster data.
				'		If the InventoryHistory dictionary does not, then it replaces the InventoryMaster data with a 0.
				'	If the PartLoc is not in dictMostRecentTransactionsAfterCutoff, then the InventoryMaster data remains.
				GUI.frmXStatus.lblStatus.Caption("Loading history status...")
				F.Intrinsic.Control.For(V.Local.iTemp, 0, V.DataTable.dtXStatus.RowCount--, 1)
			
					V.Local.sPartLoc.Set(V.DataTable.dtXStatus(V.Local.iTemp).PartLoc!FieldValRTrim)
					
					F.Intrinsic.Control.If(V.Dictionary.dictMostRecentTransactionsAfterCutoff![V.Local.sPartLoc], <>, "KeyNotFound")
						
						F.Intrinsic.Control.If(V.Dictionary.dictDateHistory![V.Local.sPartLoc], =, "")
							F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Date_History", V.Ambient.DBNull)
						F.Intrinsic.Control.Else
							F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Date_History", V.Dictionary.dictDateHistory![V.Local.sPartLoc])
						F.Intrinsic.Control.EndIf
						
						
						F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Qty_OnHand", V.Dictionary.dictNewOnHand![V.Local.sPartLoc])
						F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Cost", V.Dictionary.dictNewInvCost![V.Local.sPartLoc])
						F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Matl", V.Dictionary.dictNewMatl![V.Local.sPartLoc])
						F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Labor", V.Dictionary.dictNewLabr![V.Local.sPartLoc])
						F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Ovhd", V.Dictionary.dictNewOvhd![V.Local.sPartLoc])
						F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Outs", V.Dictionary.dictNewOuts![V.Local.sPartLoc])
						F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Freight", V.Dictionary.dictNewFrgt![V.Local.sPartLoc])
						F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Oth", V.Dictionary.dictNewOth![V.Local.sPartLoc])
						
					F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.Next(V.Local.iTemp)
				
				F.Data.Dictionary.Close("dictDateHistory")
				F.Data.Dictionary.Close("dictNewOnHand")
				F.Data.Dictionary.Close("dictNewInvCost")
				F.Data.Dictionary.Close("dictNewMatl")
				F.Data.Dictionary.Close("dictNewLabr")
				F.Data.Dictionary.Close("dictNewOvhd")
				F.Data.Dictionary.Close("dictNewOuts")
				F.Data.Dictionary.Close("dictNewFrgt")
				F.Data.Dictionary.Close("dictNewOth")
				
				F.Data.DataTable.Close("dtTransactionsBeforeCutoff")

			F.Intrinsic.Control.EndIf
			
			F.Data.Dictionary.Close("dictMostRecentTransactionsAfterCutoff")
			
			' Finally, let's check the PartCreateDate values for each PartLoc.
			'	When using a cutoff, if a PartLoc's PartCreateDate is after the CutoffDate, then zero out OnHand.
			'	This effectively zeros out the Extended Cost and Extended Price, probably the main values customers are concerned with.
			' Some options to consider in the future depending on feedback:
			'	Option 1: Make it more like Andres' original implementation. Move this check towards the beginning and only do it to the data coming from Master. After that, if History data happens to overwrite the zeros, then let it.
			'	Option 2: Make it zero out more than just OnHand. This check can zero out values loaded from History, so it would look weird if a History'd row has OnHand zeroed out, but still has its other History values (Date History, Cost, etc.).
			GUI.frmXStatus.lblStatus.Caption("Checking part creation dates...")
			F.Intrinsic.String.Build("SELECT RTRIM(CONCAT(part, location)) AS PartLoc, 'filler' FROM v_inventory_mst3 WHERE part_create_date > '{0}'", V.Local.dCutoff.PervasiveDate, V.Local.sSQL)
			F.Data.Dictionary.CreateFromSQL("dictPartCreatedAfterCutoff", "con", V.Local.sSQL)
			F.Data.Dictionary.SetDefaultReturn("dictPartCreatedAfterCutoff", "KeyNotFound")
			F.Intrinsic.Control.For(V.Local.iTemp, 0, V.DataTable.dtXStatus.RowCount--, 1)
				V.Local.sPartLoc.Set(V.DataTable.dtXStatus(V.Local.iTemp).PartLoc!FieldValRTrim)
				F.Intrinsic.Control.If(V.Dictionary.dictPartCreatedAfterCutoff![V.Local.sPartLoc], <>, "KeyNotFound")
					'F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Date_History", V.Ambient.DBNull)
					
					F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Qty_OnHand", 0.0)
					'F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Cost", 0.0)
					'F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Matl", 0.0)
					'F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Labor", 0.0)
					'F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Ovhd", 0.0)
					'F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Outs", 0.0)
					'F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Freight", 0.0)
					'F.Data.DataTable.SetValue("dtXStatus", V.Local.iTemp, "Oth", 0.0)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iTemp)
			F.Data.Dictionary.Close("dictPartCreatedAfterCutoff")

		F.Intrinsic.Control.EndIf
		GUI.frmXStatus.pbStatus.Value(80)
		
		' At this point, all DB data is finished loading, so do any other grid stuff.
		
		GUI.frmXStatus.lblStatus.Caption("Calculating extensions...")
		F.Data.DataTable.AddExpressionColumn("dtXStatus", "Ext_Price", Float, "Qty_OnHand * Amt_Price")
		F.Data.DataTable.AddExpressionColumn("dtXStatus", "Ext_Cost", Float, "Qty_OnHand * Cost")
		GUI.frmXStatus.pbStatus.Value(85)
		
		GUI.frmXStatus.lblStatus.Caption("Loading grid...")
		F.Intrinsic.Control.CallSub(LoadGvXStatus)
		
		
		
		
		'Mar 2022 - Nam Le
		'GCG_6695
		'----------------------------------------------------------------
		'add child table
'		f.Intrinsic.Control.CallSub(AddChildTable)
		f.Intrinsic.Control.CallSub(AddChildTableForBarge)
		f.Intrinsic.Control.CallSub(FormatChildTable)
		'----------------------------------------------------------------
		
		
		
		
		GUI.frmXStatus.pbStatus.Value(90)
		
		GUI.frmXStatus.lblStatus.Caption("Loading previous settings...")
		F.Intrinsic.Control.CallSub(Deserialize)
		GUI.frmXStatus.pbStatus.Value(95)
		
		GUI.frmXStatus.lblStatus.Caption("Cleaning up.")
		F.ODBC.Connection!con.Close
		GUI.frmXStatus.pbStatus.Value(100)
		
		Gui.frmXStatus.lblStatus.Visible(False)
		Gui.frmXStatus.pbStatus.Visible(False)
		
		GUI.frmXStatus.GsGCXStatus.Enabled(True)
		GUI.frmXStatus.cmdRefresh.Enabled(True)
		
		GUI.frmXStatus.lblStatus.Caption("")
		
		F.Intrinsic.Control.Catch
			V.Local.sError.Declare()
			F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
			F.Intrinsic.UI.Msgbox(V.Local.sError)
			F.Intrinsic.Control.End
		F.Intrinsic.Control.EndTry

Program.Sub.LoadDtXStatus.End

'passing cutoff date
'NOT USE
Program.Sub.AddChildTable.Start
f.Intrinsic.Control.Try

	f.Intrinsic.Control.If(v.DataTable."dtXStatus$Child".Exists)
		f.Data.Datatable.Close(v.DataTable.dtXStatus$Child)
	f.Intrinsic.Control.EndIf
	f.Data.Datatable.CreateFromSQL("dtXStatus$Child", "con","select CONCAT(PART, LOCATION) PART_LOC, LOCATION, RTRIM(LOT) LOT, BIN, HEAT, QUANTITY, UNIT_COST from V_ITEM_MASTER where QUANTITY > 0", True)
	f.Data.Datatable.AddRelation("dtXStatus", "PartLoc", "dtXStatus$Child", "PART_LOC", "DETAIL")
f.Intrinsic.Control.Catch
	v.Local.bContainCorr.Declare(Boolean)
	f.Intrinsic.String.IsInString(v.Ambient.ErrorDescription,"corresponding", true, v.Local.bContainCorr)
	f.Intrinsic.Control.If(v.Local.bContainCorr,=,False)
		f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.AddChildTable.End

'GCG_6695 
'Add Child Grid
Program.Sub.AddChildTableForBarge.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.sFilter.Declare(String)
	v.Local.iCounter.Declare(Long)
	v.Local.sFilterByPart.Declare(String)
	v.Local.sOnhand.Declare(String)
	v.Local.iCounterInner.Declare(String)
	v.Local.sChildRecords.Declare(String)
	v.Local.sPartLoc.Declare(String)
	
	f.Intrinsic.Control.If(v.Global.sCutoffDate,=,"")
		v.Global.sCutoffDate.Set(v.Ambient.Now.FormatYYYY-MM-DD)
	f.Intrinsic.Control.EndIf
	
	'find list of PART that QTY>0, and in product lines
	f.Intrinsic.String.Build("Qty_OnHand>0 {0}", v.Global.sFilterByProductLine, v.Local.sFilter)
	f.Data.DataView.Create("dtXStatus", "dvOnHand", 22, v.Local.sFilter, "")
	f.Data.DataView.ToDataTable("dtXStatus", "dvOnHand", "dtListPart")
	f.Data.DataView.Close("dtXStatus", "dvOnHand")
	f.Intrinsic.Control.If(v.DataTable.dtListPart.RowCount,<,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.For(v.Local.iCounter,0,v.DataTable.dtListPart.RowCount--,1)
		f.Intrinsic.Control.If(v.Local.iCounter,=,0)
			f.Intrinsic.String.Build(" AND RTRIM(A.PART) in ('{0}'", v.DataTable.dtListPart(v.Local.iCounter).PART!FieldValTrim, v.Local.sFilterByPart)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("{0},'{1}'", v.Local.sFilterByPart, v.DataTable.dtListPart(v.Local.iCounter).PART!FieldValTrim, v.Local.sFilterByPart)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCounter)
	f.Intrinsic.String.Build("{0}) ", v.Local.sFilterByPart, v.Local.sFilterByPart)
	
'	f.Intrinsic.String.Build("select PART+LOCATION as PART_LOC, JOB JOB_SUFFIX, sum(QUANTITY) ON_HAND from V_INVENTORY_HIST A where RTRIM(PART)<>'' and DATE_HISTORY <= '{1}' and DATE_HISTORY >= (select top 1 REF.DATE_HISTORY from V_INVENTORY_HIST REF where REF.NEW_ONHAND = 0 and A.PART = REF.PART) and CODE_TRANSACTION <> 'P18' {0} group by JOB_SUFFIX, PART_LOC having ON_HAND > 0 ", v.Global.sFilterByProductLine, v.Global.sCutoffDate, v.Local.sSQL)
	
	f.Intrinsic.String.Replace(v.Global.sFilterByProductLine, "PRODUCT_LINE", "A.PRODUCT_LINE", v.Global.sFilterByProductLine)
	
	f.Intrinsic.String.Build("select A.PART+A.LOCATION as PART_LOC, A.JOB JOB_SUFFIX, sum(A.QUANTITY) ON_HAND, A.COST UNIT_COST from V_INVENTORY_HIST A where A.DATE_HISTORY <= '{1}' and A.DATE_HISTORY >= (select top 1 REF.DATE_HISTORY from V_INVENTORY_HIST REF where REF.NEW_ONHAND = 0 and A.PART = REF.PART and REF.DATE_HISTORY <= '{1}' order by REF.DATE_HISTORY DESC) and A.CODE_TRANSACTION <> 'P18' {0} {2} group by JOB_SUFFIX, PART_LOC, UNIT_COST having ON_HAND > 0 ", v.Global.sFilterByProductLine, v.Global.sCutoffDate, v.Local.sFilterByPart, v.Local.sSQL)
	
	f.Intrinsic.String.Replace(v.Global.sFilterByProductLine, "A.PRODUCT_LINE", "PRODUCT_LINE", v.Global.sFilterByProductLine)
	
	f.Intrinsic.Control.If(v.DataTable."dtXStatus$Child".Exists)
		f.Data.Datatable.Close(v.DataTable.dtXStatus$Child) 
	f.Intrinsic.Control.EndIf
	f.Data.Datatable.CreateFromSQL("dtXStatus$Child" ,"con", v.Local.sSQL, True)
'	f.Data.Datatable.AddColumn("dtXStatus$Child", "UNIT_COST", Float, 0.0)

	f.Data.Datatable.AddRelation("dtXStatus", "PartLoc", "dtXStatus$Child", "PART_LOC", "DETAIL")

f.Intrinsic.Control.Catch
	v.Local.bContainCorr.Declare(Boolean)
	f.Intrinsic.String.IsInString(v.Ambient.ErrorDescription,"corresponding", true, v.Local.bContainCorr)
	f.Intrinsic.Control.If(v.Local.bContainCorr,=,False)
		f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.AddChildTableForBarge.End

Program.Sub.AddChildTableForBargeOld.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.sFilter.Declare(String)
	v.Local.iCounter.Declare(Long)
	v.Local.sPart.Declare(String)
	v.Local.sOnhand.Declare(String)
	v.Local.iCounterInner.Declare(String)
	v.Local.sChildRecords.Declare(String)
	v.Local.sPartLoc.Declare(String)
	
	f.Intrinsic.Control.If(v.Global.sCutoffDate,=,"")
		v.Global.sCutoffDate.Set(v.Ambient.Now.FormatYYYY-MM-DD)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable."dtXStatus$Child".Exists)
		f.Data.Datatable.Close(v.DataTable.dtXStatus$Child)
	f.Intrinsic.Control.EndIf
	
	'find list of PART that QTY>0, and in product lines
	'11 for testing w BARGE
	f.Intrinsic.String.Build("Product_Line='{0}' AND Qty_OnHand>0", "11", v.Local.sFilter)
'	f.Intrinsic.String.Build("Product_Line='{0}' AND Qty_OnHand>0", "12", v.Local.sFilter)
	f.Data.Datatable.Select("dtXStatus", v.Local.sFilter, v.Local.sRet)
	
'	if list exists, loop thru and build child table
	f.Intrinsic.Control.If(v.Local.sRet,!=, "***NORETURN***")
		
		'create child table
		f.Data.Datatable.CreateFromSQL("dtXStatus$Child", "con", "select '1' TBD from V_ITEM_MASTER where 1=2", True)
		f.Data.Datatable.RemoveColumn("dtXStatus$Child", "TBD")
		f.Data.Datatable.AddColumn("dtXStatus$Child", "PART_LOC", "String")
		f.Data.Datatable.AddColumn("dtXStatus$Child", "JOB_SUFFIX", "String")
		f.Data.Datatable.AddColumn("dtXStatus$Child", "QUANTITY", "Float",0.0)
		f.Data.Datatable.AddColumn("dtXStatus$Child", "UNIT_COST", "Float",0.0)
	
		f.Intrinsic.String.Split(v.Local.sRet,"*!*", v.Local.sRet)
		f.Intrinsic.Control.For(v.Local.iCounter, 0, v.Local.sRet.UBound, 1)
			v.Local.sPart.Set(v.DataTable.dtXStatus(v.Local.sRet(v.Local.iCounter)).Part!FieldValTrim)
			v.Local.sPartLoc.Set(v.DataTable.dtXStatus(v.Local.sRet(v.Local.iCounter)).PartLoc!FieldVal)
			v.Local.sOnhand.Set(v.DataTable.dtXStatus(v.Local.sRet(v.Local.iCounter)).Qty_OnHand!FieldVal)
			
			f.Intrinsic.String.Build("select top {0} RTRIM(JOB)+'-'+RTRIM(SUFFIX) JOB_SUFFIX, case when QUANTITY<0 then QUANTITY*-1 else QUANTITY end as QUANTITY, COST*QUANTITY*-1 as COST from V_INVENTORY_HIST where RTRIM(PART) = '{1}' and DATE_HISTORY <= '{2}' and CODE_TRANSACTION <> 'P18' order by DATE_HISTORY DESC", v.Local.sOnhand.Long, v.Local.sPart.Trim, v.Global.sCutoffDate, v.Local.sSQL)
			'no suffix
			f.Intrinsic.String.Build("select top {0} RTRIM(JOB) JOB_SUFFIX, case when QUANTITY<0 then QUANTITY*-1 else QUANTITY end as QUANTITY, case when COST<0 then COST*-1 else COST end as COST from V_INVENTORY_HIST where RTRIM(PART) = '{1}' and DATE_HISTORY <= '{2}' and CODE_TRANSACTION <> 'P18' order by DATE_HISTORY DESC", v.Local.sOnhand.Long, v.Local.sPart.Trim, v.Global.sCutoffDate, v.Local.sSQL)
			f.Intrinsic.Control.If(v.DataTable.dtChildData.Exists)
				f.Data.Datatable.Close("dtChildData")
			f.Intrinsic.Control.EndIf
			f.Data.Datatable.CreateFromSQL("dtChildData", "con", v.Local.sSQL, True)
			
			'add records to child table
			f.Intrinsic.Control.If(v.DataTable.dtChildData.RowCount,>,0)
				f.Intrinsic.Control.For(v.Local.iCounterInner,0,v.DataTable.dtChildData.RowCount--,1)
					f.Data.Datatable.AddRow("dtXStatus$Child", "PART_LOC",v.Local.sPartLoc, "JOB_SUFFIX", v.DataTable.dtChildData(v.Local.iCounterInner).JOB_SUFFIX!FieldValTrim, "QUANTITY", v.DataTable.dtChildData(v.Local.iCounterInner).QUANTITY!FieldVal, "UNIT_COST", v.DataTable.dtChildData(v.Local.iCounterInner).COST!FieldVal)
				f.Intrinsic.Control.Next(v.Local.iCounterInner)
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Next(v.Local.iCounter)
	f.Intrinsic.Control.EndIf
	
	f.Data.Datatable.AcceptChanges("dtXStatus$Child")
'	f.Data.Datatable.CreateFromSQL("dtXStatus$Child", "con","select CONCAT(PART, LOCATION) PART_LOC, LOCATION, RTRIM(LOT) LOT, BIN, HEAT, QUANTITY, UNIT_COST from V_ITEM_MASTER where QUANTITY > 0", True)

	f.Data.Datatable.AddRelation("dtXStatus", "PartLoc", "dtXStatus$Child", "PART_LOC", "DETAIL")

	
f.Intrinsic.Control.Catch
	v.Local.bContainCorr.Declare(Boolean)
	f.Intrinsic.String.IsInString(v.Ambient.ErrorDescription,"corresponding", true, v.Local.bContainCorr)
	f.Intrinsic.Control.If(v.Local.bContainCorr,=,False)
		f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.AddChildTableForBargeOld.End

Program.Sub.FormatChildTable.Start
f.Intrinsic.Control.Try
	gui.frmXStatus.GsGCXStatus.AddGridviewFromDatatable("gvChild","dtXStatus$Child")
	
	gui.frmXStatus.GsGCXStatus.SetGridviewProperty("gvChild", v.Enum.GridViewPropertyNames!Editable, False)
	
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "UNIT_COST", v.Enum.ColumnPropertyNames!Caption, "Unit Cost")
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "JOB_SUFFIX", v.Enum.ColumnPropertyNames!Caption, "Barge")
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "ON_HAND", v.Enum.ColumnPropertyNames!Caption, "Quantity")
	
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "PART_LOC", v.Enum.ColumnPropertyNames!HeaderFontBold, True)
'	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "LOCATION", v.Enum.ColumnPropertyNames!HeaderFontBold, True)
'	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "LOT", v.Enum.ColumnPropertyNames!HeaderFontBold, True)
'	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "BIN", v.Enum.ColumnPropertyNames!HeaderFontBold, True)
'	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "HEAT", v.Enum.ColumnPropertyNames!HeaderFontBold, True)
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "ON_HAND", v.Enum.ColumnPropertyNames!HeaderFontBold, True)
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "UNIT_COST", v.Enum.ColumnPropertyNames!HeaderFontBold, True)
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "JOB_SUFFIX", v.Enum.ColumnPropertyNames!HeaderFontBold, True)
	
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "JOB_SUFFIX", v.Enum.ColumnPropertyNames!HeaderHAlignment, "Center")
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "ON_HAND", v.Enum.ColumnPropertyNames!HeaderHAlignment, "Center")
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "UNIT_COST", v.Enum.ColumnPropertyNames!HeaderHAlignment, "Center")
	
	
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "PART_LOC", v.Enum.ColumnPropertyNames!Visible, False)
	
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "UNIT_COST", v.Enum.ColumnPropertyNames!DisplayCustomNumeric, "$###,###.0000")
	gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvChild", "ON_HAND", v.Enum.ColumnPropertyNames!DisplayCustomNumeric, "###,###.0000")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.FormatChildTable.End

Program.Sub.LoadGvXStatus.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	Gui.frmXStatus.GsGCXStatus.AddGridviewFromDatatable("gvXStatus","dtXStatus")
	Gui.frmXStatus.GsGCXStatus.SuspendLayout()
	Gui.frmXStatus.GsGCXStatus.SetGridViewProperty("gvXStatus","MultiSelect",True)
	Gui.frmXStatus.GsGCXStatus.SetGridViewProperty("gvXStatus","AllowSort",True)
	Gui.frmXStatus.GsGCXStatus.SetGridViewProperty("gvXStatus","AllowFilter",True)
	Gui.frmXStatus.GsGCXStatus.SetGridViewProperty("gvXStatus","ShowGroupPanel",True)
	Gui.frmXStatus.GsGCXStatus.SetGridViewProperty("gvXStatus","EnableAppearanceOddRow",True)
	Gui.frmXStatus.GsGCXStatus.SetGridViewProperty("gvXStatus","OptionsViewColumnAutoWidth",False)
	
	Gui.frmXStatus.GsGCXStatus.SetGridViewProperty("gvXStatus",v.Enum.GridViewPropertyNames!ShowDetailTabs,True)
	
	
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","PartLoc","Visible",False)
	
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Part","VisibleIndex","0")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Location","VisibleIndex","1")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Description","VisibleIndex","2")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","AltDesc","VisibleIndex","3")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","ExtraDesc","VisibleIndex","4")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Product_Line","VisibleIndex","5")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Source","VisibleIndex","6")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","UM_Inventory","VisibleIndex","7")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Time_Material_Lead","VisibleIndex","8")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Sort","VisibleIndex","9")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Bin","VisibleIndex","10")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_ABC","VisibleIndex","11")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","LBS","VisibleIndex","12")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Date_History","VisibleIndex","13")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_OnHand","VisibleIndex","14")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Reorder","VisibleIndex","15")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","OnOrder","VisibleIndex","16")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Required","VisibleIndex","17")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Usage_Last_12_Mos","VisibleIndex","18")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Amt_Price","VisibleIndex","19")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Cost","VisibleIndex","20")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Matl","VisibleIndex","21")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Labor","VisibleIndex","22")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ovhd","VisibleIndex","23")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Outs","VisibleIndex","24")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Freight","VisibleIndex","25")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Oth","VisibleIndex","26")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Price","VisibleIndex","27")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Cost","VisibleIndex","28")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Lot","VisibleIndex","29")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Drop","VisibleIndex","30")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Serialize","VisibleIndex","31")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Obsolete_Flag","VisibleIndex","32")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Inactive","VisibleIndex","33")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Name_Vendor","VisibleIndex","34")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info1","VisibleIndex","35")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info2","VisibleIndex","36")
	
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Part","Caption","Part")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Location","Caption","Loc")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Description","Caption","Description")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","AltDesc","Caption","Alt Description")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","ExtraDesc","Caption","Extra Description")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Product_Line","Caption","PL")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Source","Caption","Source Code")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","UM_Inventory","Caption","Inv UM")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Time_Material_Lead","Caption","Lead Time")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Sort","Caption","Sort Code")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Bin","Caption","Bin")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_ABC","Caption","ABC Code")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","LBS","Caption","Weight")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Date_History","Caption","Date History")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_OnHand","Caption","Qty On Hand")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Reorder","Caption","Reorder Point")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","OnOrder","Caption","Qty On Order")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Required","Caption","Qty Required")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Usage_Last_12_Mos","Caption","Usage (12 Mths)")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Amt_Price","Caption","Price")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Cost","Caption","Unit Cost")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Matl","Caption","Material")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Labor","Caption","Labor")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ovhd","Caption","Overhead")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Outs","Caption","Outside")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Freight","Caption","Freight")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Oth","Caption","Other")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Price","Caption","Ext. Price")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Cost","Caption","Ext. Cost")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Lot","Caption","Lot/Bin")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Drop","Caption","Drop")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Serialize","Caption","Serialized")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Obsolete_Flag","Caption","Obsolete")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Inactive","Caption","Inactive")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Name_Vendor","Caption","Name Vendor")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info1","Caption","Text Info 1")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info2","Caption","Text Info 2")
	
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Part","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Location","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Description","AllowEdit",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","AltDesc","AllowEdit",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","ExtraDesc","AllowEdit",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Product_Line","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Source","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","UM_Inventory","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Time_Material_Lead","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Sort","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Bin","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_ABC","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","LBS","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Date_History","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_OnHand","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Reorder","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","OnOrder","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Required","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Usage_Last_12_Mos","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Amt_Price","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Cost","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Matl","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Labor","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ovhd","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Outs","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Freight","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Oth","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Price","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Cost","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Lot","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Drop","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Serialize","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Obsolete_Flag","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Inactive","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Name_Vendor","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info1","AllowEdit",False)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info2","AllowEdit",False)
	
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Description","ReadOnly",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","AltDesc","ReadOnly",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","ExtraDesc","ReadOnly",True)

	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Part","MinWidth","120")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Location","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Description","MinWidth","200")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","AltDesc","MinWidth","250")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","ExtraDesc","MinWidth","300")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Product_Line","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Source","MinWidth","85")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","UM_Inventory","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Time_Material_Lead","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Sort","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Bin","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_ABC","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","LBS","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Date_History","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_OnHand","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Reorder","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","OnOrder","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Required","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Usage_Last_12_Mos","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Amt_Price","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Cost","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Matl","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Labor","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ovhd","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Outs","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Freight","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Oth","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Price","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Cost","MinWidth","100")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Lot","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Drop","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Serialize","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Obsolete_Flag","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Inactive","MinWidth","65")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Name_Vendor","MinWidth","130")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info1","MinWidth","130")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info2","MinWidth","130")
	
'	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info2", v.Enum.ColumnPropertyNames!Visible, False)

	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Part","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Location","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Description","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","AltDesc","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","ExtraDesc","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Product_Line","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Source","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","UM_Inventory","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Time_Material_Lead","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Sort","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Bin","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_ABC","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","LBS","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Date_History","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_OnHand","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Reorder","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","OnOrder","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Required","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Usage_Last_12_Mos","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Amt_Price","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Cost","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Matl","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Labor","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ovhd","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Outs","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Freight","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Oth","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Price","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Cost","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Lot","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Drop","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Serialize","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Obsolete_Flag","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Inactive","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Name_Vendor","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info1","HeaderFontBold",True)
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info2","HeaderFontBold",True)

	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Part","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Location","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Description","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","AltDesc","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","ExtraDesc","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Product_Line","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Source","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","UM_Inventory","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Time_Material_Lead","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Sort","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Bin","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_ABC","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","LBS","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Date_History","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_OnHand","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Reorder","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","OnOrder","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Required","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Usage_Last_12_Mos","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Amt_Price","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Cost","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Matl","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Labor","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ovhd","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Outs","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Freight","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Oth","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Price","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Cost","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Lot","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Drop","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Serialize","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Obsolete_Flag","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Inactive","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Name_Vendor","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info1","HeaderHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info2","HeaderHAlignment","Center")

	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Location","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Product_Line","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Source","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","UM_Inventory","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Time_Material_Lead","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_Sort","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Bin","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Code_ABC","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Date_History","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Reorder","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Usage_Last_12_Mos","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Lot","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Drop","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Serialize","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Obsolete_Flag","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Flag_Inactive","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Name_Vendor","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info1","CellHAlignment","Center")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Text_Info2","CellHAlignment","Center")

	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","LBS","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_OnHand","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Reorder","DisplayCustomNumeric","#,###,##0")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","OnOrder","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Qty_Required","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Usage_Last_12_Mos","DisplayCustomNumeric","#,###,##0")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Amt_Price","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Cost","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Matl","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Labor","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ovhd","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Outs","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Freight","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Oth","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Price","DisplayCustomNumeric","#,###,##0.00####")
	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Ext_Cost","DisplayCustomNumeric","#,###,##0.00####")

	Gui.frmXStatus.GsGCXStatus.SetColumnProperty("gvXStatus","Date_History","DisplayCustomDatetime","d")
	
	
	Gui.frmXStatus.GsGCXStatus.AddSummaryItem("gvXStatus","Qty_OnHand","","Sum","","","n")
	Gui.frmXStatus.GsGCXStatus.AddSummaryItem("gvXStatus","OnOrder","","Sum","","","n")
	Gui.frmXStatus.GsGCXStatus.AddSummaryItem("gvXStatus","Qty_Required","","Sum","","","n")
	Gui.frmXStatus.GsGCXStatus.AddSummaryItem("gvXStatus","Ext_Price","","Sum","","","n")
	Gui.frmXStatus.GsGCXStatus.AddSummaryItem("gvXStatus","Ext_Cost","","Sum","","","")
	
	F.Intrinsic.Control.If(V.Caller.GSSVersion,>,2016.2)
		Gui.frmXStatus.GsGCXStatus.AddGridGroupSummaryItem("gvXStatus","Ext_Cost","Ext_Cost2","Sum","| Tot Cost: "," |","n")
	F.Intrinsic.Control.EndIf
	
	Gui.frmXStatus.GsGCXStatus.ResumeLayout()
	Gui.frmXStatus.GsGCXStatus.MainView("gvXStatus")
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.LoadGvXStatus.End

Program.Sub.Serialize.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sSerialize.Declare
	
	'GvXStatus
	Gui.frmXStatus.GsGCXStatus.Serialize("gvXStatus",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVXSTATUS",4631,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.Deserialize.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sSerialize.Declare
	
	'GvXStatus
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVXSTATUS",4631,1000,6,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
		Gui.frmXStatus.GsGCXStatus.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.cmdSelectPL_Click.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.sRet.Declare(String)
	
	v.Local.sSQL.Set("select distinct RTRIM(PROD_LINE) PL, RTRIM(PL_NAME) PL_NAME from V_PL_MASTER order by PL")
	f.Intrinsic.Control.If(v.DataTable.dtPL.Exists)
		gui.FormPL..Visible(True)
		f.Intrinsic.Control.ExitSub
		f.Data.DataTable.Close("dtPL")
	f.Intrinsic.Control.EndIf
	
	f.ODBC.Connection!Con.OpenCompanyConnection
	f.Data.DataTable.CreateFromSQL("dtPL", "Con", v.Local.sSQL, True)
	
	'add col
	f.Data.DataTable.AddColumn("dtPL", "SELECT", "Boolean", False)
	f.Data.Datatable.SetValue("dtPL", -1, "SELECT", False)
	f.ODBC.Connection!Con.Close
	
	gui.FormPL.gsgcAllPL.AddGridviewFromDatatable("gvAllPL", "dtPL")
	
	gui.FormPL.gsgcAllPL.SetGridviewProperty("gvAllPL", v.Enum.GridViewPropertyNames!Editable, True)
	gui.FormPL.gsgcAllPL.SetGridviewProperty("gvAllPL", v.Enum.GridViewPropertyNames!ReadOnly, False)
	
	'format
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL" , v.Enum.ColumnPropertyNames!Caption, "PL")
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL_NAME" , v.Enum.ColumnPropertyNames!Caption, "DESCRIPTION")
	
	
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL" , v.Enum.ColumnPropertyNames!HeaderFontBold, True)
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL_NAME" , v.Enum.ColumnPropertyNames!HeaderFontBold, True)
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "SELECT" , v.Enum.ColumnPropertyNames!HeaderFontBold, True)
	
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "SELECT", v.Enum.ColumnPropertyNames!CellHAlignment, "Center")
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL", v.Enum.ColumnPropertyNames!CellHAlignment, "Center")
	
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL", v.Enum.ColumnPropertyNames!HeaderHAlignment, "Center")
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL_NAME", v.Enum.ColumnPropertyNames!HeaderHAlignment, "Center")
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "SELECT", v.Enum.ColumnPropertyNames!HeaderHAlignment, "Center")
	
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL", v.Enum.ColumnPropertyNames!VisibleIndex, 1)
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL_NAME", v.Enum.ColumnPropertyNames!VisibleIndex, 2)
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "SELECT", v.Enum.ColumnPropertyNames!VisibleIndex, 0)
	
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL", v.Enum.ColumnPropertyNames!MinWidth, 40)
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "PL_NAME", v.Enum.ColumnPropertyNames!MinWidth, 150)
	gui.FormPL.gsgcAllPL.SetColumnProperty("gvAllPL", "SELECT", v.Enum.ColumnPropertyNames!MinWidth, 40)
	
	gui.FormPL.gsgcAllPL.MainView("gvAllPL")

	gui.FormPL..Visible(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(Catching)
f.Intrinsic.Control.EndTry

Program.Sub.cmdSelectPL_Click.End

Program.Sub.FormPL_UnLoad.Start
gui.FormPL..Visible(False)
Program.Sub.FormPL_UnLoad.End

Program.Sub.cmdPL_OK_Click.Start
f.Intrinsic.Control.Try
	v.Local.iCounter.Declare(Long)
	
	gui.FormPL..Visible(False)
	
	f.Data.DataView.Create("dtPL", "dvSelectedPL", 22, "SELECT=TRUE", "")
	f.Data.DataView.ToDataTable("dtPL", "dvSelectedPL", "dtSelectedPL")
	f.Data.DataView.Close("dtPL", "dvSelectedPL")
	
	f.Intrinsic.Control.If(v.DataTable.dtSelectedPL.RowCount,>,0)
		f.Intrinsic.Control.For(v.Local.iCounter,0,v.DataTable.dtSelectedPL.RowCount--,1)
			f.Intrinsic.Control.If(v.Local.iCounter,=,0)
				f.Intrinsic.String.Build(" AND PRODUCT_LINE in ('{0}'", v.DataTable.dtSelectedPL(v.Local.iCounter).PL!FieldValTrim, v.Global.sFilterByProductLine)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("{0},'{1}'", v.Global.sFilterByProductLine, v.DataTable.dtSelectedPL(v.Local.iCounter).PL!FieldValTrim, v.Global.sFilterByProductLine)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Next(v.Local.iCounter)
		'close AND PRODUCT_LINE in
		f.Intrinsic.String.Build("{0}) ", v.Global.sFilterByProductLine, v.Global.sFilterByProductLine)
	f.Intrinsic.Control.EndIf
	
	f.Data.Datatable.Close("dtSelectedPL")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPL_OK_Click.End

'check Filter by PL changed event
Program.Sub.chkPL_Change.Start
f.Intrinsic.Control.try	
	v.Local.bCheck.Declare(Boolean)
	
	v.Local.bCheck.Set(v.Screen.frmXStatus!chkPL.Value)
	
	f.Intrinsic.Control.If(v.Local.bCheck,=,True)
		gui.frmXStatus.cmdSelectPL.Enabled(True)
	f.Intrinsic.Control.Else
		gui.frmXStatus.cmdSelectPL.Enabled(False)
		v.Global.sFilterByProductLine.Set("")
		f.Intrinsic.Control.If(v.DataTable.dtPL.Exists)
			f.Data.Datatable.Close("dtPL")
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.chkPL_Change.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$nle$}$20220601094806905$}$kjzCRYkA6UEoRnCwndYnRZx+VYO5SvmIxYMODn/uAdWJwJvhxDTP6cUaDIvm8yxa
Program.Sub.Comments.End